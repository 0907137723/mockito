buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0' // coveralls plugin depends on cobertura plugin
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.1.6'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5' //publishing to bintray
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2' //rest calls to bintray api
    }
}

apply plugin: 'maven-publish'

apply from: 'gradle/version.gradle'
apply from: "gradle/ide.gradle"
apply from: 'gradle/release.gradle'
apply from: 'gradle/coverage.gradle'

allprojects {
    repositories {
        jcenter()
    }
}

group = 'org.mockito'
description = 'Core API and implementation.'
sourceCompatibility = 1.5
targetCompatibility = 1.5

configurations {
    provided
    testUtil //TODO move to separate project
}

sourceSets {
    main {
        java.srcDir 'src'
        compileClasspath = compileClasspath + configurations.provided
    }
    test {
        java.srcDir 'test'
        compileClasspath = compileClasspath + configurations.provided
    }
}

test.include "**/*Test.class"

tasks.withType(JavaCompile) {
    options.warnings = false
}

//TODO we should remove all dependencies to checked-in jars and move the 'mockito-all' project out
//we should consider getting rid of mockito-all completely (or moving out into a completely separate project.
dependencies {
    provided "junit:junit:4.10"
    compile fileTree('lib/run') { exclude '*.txt' }, fileTree('lib/repackaged') { exclude '*.txt'}

    testCompile fileTree("lib/test")
    testRuntime configurations.provided

    testUtil sourceSets.test.output
}

def commonJarContent = copySpec {
    //source
    from(sourceSets.main.allSource)

    //mockito license
    from(".") { include 'LICENSE', 'NOTICE' }
    //repackaged license
    from("lib/repackaged") { include '*.txt' }
    //repackaged classes
    from(zipTree("lib/repackaged/cglib-and-asm-1.0.jar")) {
        exclude 'META-INF/MANIFEST.MF'
    }
}

jar {
    baseName = 'mockito-core'
    with commonJarContent
}

task allJar(type: Jar) {
    baseName = 'mockito-all'

    with commonJarContent

    //classes
    from(sourceSets.main.output)

    //3rd party library classes
    from(zipTree("lib/run/objenesis-2.1.jar")) { exclude "META-INF/maven/**" }
    from(zipTree("lib/run/com.springsource.org.hamcrest.core-1.1.0.jar")) { exclude "LICENSE.txt" }

    //3rd party license files
    from("lib/run") { exclude '**/*.jar' }
}

tasks.withType(Jar) { task ->
    doLast {
        project.exec {
            commandLine 'ant', '-f', 'build-ant.xml', "osgify.$task.baseName", "-Dversion=$project.version"
        }
    }
}

artifacts {
    archives allJar
}

publishing {
    publications {
        mockitoCore(MavenPublication) {
            from components.java
            artifactId 'mockito-core'
        }
        mockitoAll(MavenPublication) {
            artifact allJar
            artifactId 'mockito-all'
        }
    }
}
apply from: "gradle/pom.gradle"

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}