buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0' // coveralls plugin depends on cobertura plugin
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.1.6'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5' //publishing to bintray
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2' //rest calls to bintray api
    }
}

apply from: 'gradle/version.gradle'

group = 'org.mockito'
description = 'Core API and implementation.'

//TODO don't use 'allprojects'
allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    repositories {
        jcenter()
    }
}

apply plugin: 'maven-publish'
apply from: 'gradle/publish.gradle'

sourceCompatibility = 1.5
targetCompatibility = 1.5

configurations {
    provided
    testUtil //TODO move to separate project
}

sourceSets {
    main {
        java.srcDir 'src'
        compileClasspath = compileClasspath + configurations.provided
    }
    test {
        java.srcDir 'test'
        compileClasspath = compileClasspath + configurations.provided
    }
}

test.include "**/*Test.class"

tasks.withType(Compile) {
    options.warnings = false
}

dependencies {
    provided fileTree('lib/compile')
    compile fileTree('lib/run') { exclude '*.txt' }, fileTree('lib/repackaged') { exclude '*.txt'}

    testCompile fileTree("lib/test")
    testRuntime fileTree("lib/compile")

    testUtil sourceSets.test.output
}

//TODO push out
// Configure VCS in generated IPR file
idea.project.ipr {
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}

idea.module.scopes.PROVIDED.plus += configurations.provided
eclipse.classpath.plusConfigurations += configurations.provided

//TODO push out
// EXPERIMENTAL : coverage
// configure code coverage
apply plugin: 'cobertura'
apply plugin: 'coveralls'
cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
//cobertura.coverageIgnoreTrivial = true



def commonJarContent = copySpec {
    //source
    from(sourceSets.main.allSource)

    //mockito license
    from(".") { include 'LICENSE', 'NOTICE' }
    //repackaged license
    from("lib/repackaged") { exclude '**/*.jar' }
    //repackaged classes
    from(zipTree("lib/repackaged/cglib-and-asm-1.0.jar")) {
        exclude 'META-INF/MANIFEST.MF'
    }
}

jar {
    baseName = 'mockito-core'
    with commonJarContent
}

task allJar(type: Jar) {
    baseName = 'mockito-all'

    with commonJarContent

    //classes
    from(sourceSets.main.output)

    //3rd party library classes
    from(zipTree("lib/run/objenesis-2.1.jar")) { exclude "META-INF/maven/**" }
    from(zipTree("lib/run/com.springsource.org.hamcrest.core-1.1.0.jar")) { exclude "LICENSE.txt" }

    //3rd party license files
    from("lib/run") { exclude '**/*.jar' }
}

tasks.withType(Jar) { task ->
    doLast {
        project.exec {
            commandLine 'ant', '-f', 'build-ant.xml', "osgify.$task.baseName", "-Dversion=$project.version"
        }
    }
}

artifacts {
    archives allJar
}

publishing {
    publications {
        mockitoCore(MavenPublication) {
            from components.java
            artifactId 'mockito-core'
        }
        mockitoAll(MavenPublication) {
            artifact allJar
            artifactId 'mockito-all'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}