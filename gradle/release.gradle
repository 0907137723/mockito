assert project == rootProject

apply from: rootProject.file("gradle/publish.gradle")

/*
TROUBLESHOOTING

In case the release process from Travis CI fails, please try:
  - push dummy commit
  - update version.properties manually and push (can be done in the browser via GitHub gui)
*/

task (release) {
    onlyIf {
        def branch = System.env.TRAVIS_BRANCH
        def pr = System.env.TRAVIS_PULL_REQUEST
        def releasable = pr == 'false' && branch == 'master'
        logger.lifecycle("Skipping release: {}, branch: {}, pull request: {}.", !releasable, branch, pr)
        releasable
    }
    doLast {
        String currentVersion = project.version //the version loaded when Gradle build has started
        String buildInfo = "by Travis CI build #$System.env.TRAVIS_BUILD_NUMBER [ci skip]"
        MaskedArg pushTarget = new MaskedArg(value: "https://szczepiq:${System.env.GH_TOKEN}@github.com/mockito/mockito.git")

        //Release process. Should *not* run concurrently.
        run "./gradlew", "bintrayUpload"
        configureGit()
        pushTag(currentVersion, buildInfo, pushTarget)
        commitUpdatedJavadoc()

        /*
            Now we'll start operating on master. This introduces a problem - someone might have pushed changes *after* release process has started
            What can happen:
             - bintrayUpload will fail saying that the version is already released
             - git push fails saying that the pull is needed
            Resolutions:
             - push dummy commit
             - manually edit version.properties and push (can be done in the browser via GitHub gui)
        */
        run "git", "checkout", "master"
        commitIncrementedVersion(currentVersion, buildInfo)

        run "git", "push", pushTarget, "master", "gh-pages"
    }
}

//TODO work in progress
//printIssuesBetween(getPreviousVersion(), "1.10.29-dev")

private void printIssuesBetween(String fromVersion, String toVersion) {
    getCommitsBetween("1.9.5", "1.10.29-dev").each {
        if (it.contains("[ci skip]")) {
            return
        }
        def tickets = it.findAll("#\\d+")
        if (tickets) {
            println "$tickets found in $it"
        }
        def issues = it.findAll("[Ii]ssue \\d+")
        if (issues) {
            println "$issues found in $it"
        }
    }
}

private String getPreviousVersion() {
    return project.file("doc/RELEASE-NOTES.md").withReader {
        def firstLine = it.readLine()
        assert firstLine.startsWith('###')
        //Example: "### 1.9.5 (06-10-2012)", we want to extract "1.9.5"
        def m = firstLine =~ /### (.+?) .*/
        assert m.matches()
        return m.group(1)
    }
}

private Collection<String> getCommitsBetween(String fromVersion, String toVersion) {
    def out = new ByteArrayOutputStream()
    def token = "@@commit@@"
    project.exec {
        standardOutput = out
        commandLine "git", "log", "--pretty=format:%B$token", "v${fromVersion}..v${toVersion}"
    }
    out.toString().split(token)*.trim()
}

private void pushTag(String currentVersion, String buildInfo, MaskedArg pushTarget) {
    String tag = "v${currentVersion}"
    String tagMessage = "Create tag $tag ${buildInfo}"
    run "git", "tag", "-a", tag, "-m", "$tagMessage" as String
    run "git", "push", pushTarget, tag
}

private void configureGit() {
    run "git", "config", "user.email", "szczepiq@gmail.com"
    run "git", "config", "user.name", "Szczepan Faber"
}

private void commitIncrementedVersion(String currentVersion, String buildInfo) {
    run "./gradlew", "incrementVersion"
    String nextVersion = project.ext.loadVersion() //currently configured version in the file - TODO we don't need this, we infer changes from tags
    String message = "Increment version '$currentVersion' -> '$nextVersion' $buildInfo"
    run "git", "commit", "-m", "$message" as String, "version.properties"
}

private void commitUpdatedJavadoc() {
    run "git", "fetch", "origin", "+gh-pages:gh-pages", "--depth=1"
    run "git", "checkout", "gh-pages"
    run "git", "rm", "-r", "docs/current", "-q"
    project.copy {
        from "build/javadoc"
        into "docs/$project.version"
    }
    project.copy {
        from "build/javadoc"
        into "docs/current"
    }
    run "git", "add", "docs"
    run "git", "commit", "-m", '"Publish javadoc by Travis CI build #' + System.env.TRAVIS_BUILD_NUMBER + ' [ci skip]"', "-q"
}

task updateJavadoc {
    doLast {
        commitUpdatedJavadoc()
    }
}

void run(Object ... args) {
    logger.lifecycle("--- Executing: {}", args.join(" "))
    exec { commandLine args.collect { it instanceof MaskedArg? it.value : it.toString()} }
    logger.lifecycle("--- Completed!", args)
}

class MaskedArg {
    String value
    String toString() { "<masked>" }
}